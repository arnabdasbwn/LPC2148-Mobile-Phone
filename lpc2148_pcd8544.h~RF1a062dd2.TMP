// -----------------------------------------------------------------------------
// -          Arnab Kumar Das  LPC21xx  ARM Keil MDK5 + Legacy Support
// -----------------------------------------------------------------------------
// Header: This Header File is used to Interface pcd8544 the Nokia 5110 1100 GLCD
// File Name: lpc2148_pcd8544.h
// Author: Arnab Kumar Das
// Youtube Link: https://www.youtube.com/c/ArnabDasBwn
// GitHub Link: https://github.com/arnabdasbwn
// Date: 13/07/2016 5:48:20 AM  IST
// Licence: GNU General Public License
// -----------------------------------------------------------------------------

#ifndef __lpc2148_pcd8544_H
#define __lpc2148_pcd8544_H

#include <lpc214x.h>

#define BL_pin    21 //12
#define RST_pin   22 //13
//#define CE_pin    7
#define DC_pin    23 //0
//#define SDO_pin   6
//#define SCK_pin   4

#define pcd8544_set_Y_addr  0x40
#define pcd8544_set_X_addr  0x80
#define pcd8544_set_temp    0x04
#define pcd8544_set_bias    0x10
#define pcd8544_set_VOP     0x80
#define pcd8544_power_down  0x04
#define pcd8544_entry_mode  0x02
#define pcd8544_extended_instruction  0x01
#define pcd8544_display_blank         0x00
#define pcd8544_display_normal        0x04
#define pcd8544_display_all_on        0x01
#define pcd8544_display_inverted      0x05
#define pcd8544_function_set          0x20
#define pcd8544_display_control       0x08
#define CMD                           0
#define DAT                           1
#define X_max                         84
#define Y_max                         48
#define Rows                          6
#define BLACK                         0
#define WHITE                         1
#define PIXEL_XOR                     2
#define ON                            0
#define OFF                           1
#define NO                            0
#define YES                           1
#define buffer_size                   504

// -----------------------------------------------------------------------------

void pcd8544_write(unsigned char type, unsigned char value);
void pcd8544_reset(void);
void pcd8544_init(void);
void pcd8544_backlight_state(unsigned char value);
void pcd8544_set_contrast(unsigned char value);
void pcd8544_set_cursor(unsigned char x_pos, unsigned char y_pos);
void pcd8544_print_char(unsigned char ch, unsigned char colour);
void pcd8544_print_custom_char(unsigned char *map);
void pcd8544_fill(unsigned char bufr);
void pcd8544_clear_buffer(unsigned char colour);
void pcd8544_clear_screen(unsigned char colour);
void pcd8544_print_image(const unsigned char *bmp);
void pcd8544_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch, unsigned char colour);
void print_int(unsigned char x_pos, unsigned char y_pos, signed long value, unsigned char colour);
void print_decimal(unsigned char x_pos, unsigned char y_pos, unsigned int value, unsigned char points, unsigned char colour);
void print_float(unsigned char x_pos, unsigned char y_pos, float value, unsigned char points, unsigned char colour);
void Draw_Pixel(unsigned char x_pos, unsigned char y_pos, unsigned char colour);
void Draw_Line(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char colour);
void Draw_Rectangle(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char fill, unsigned char colour);
void Draw_Circle(signed int xc, signed int yc, signed int radius, unsigned char fill, unsigned char colour);

unsigned char pcd8544_buffer[X_max][Rows];

static const unsigned char font[][5] =
{
     {0x00, 0x00, 0x00, 0x00, 0x00} // 20
    ,{0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
    ,{0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
    ,{0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
    ,{0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
    ,{0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
    ,{0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
    ,{0x00, 0x05, 0x03, 0x00, 0x00} // 27 '
    ,{0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
    ,{0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
    ,{0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
    ,{0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
    ,{0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
    ,{0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
    ,{0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
    ,{0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
    ,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
    ,{0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
    ,{0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
    ,{0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
    ,{0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
    ,{0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
    ,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
    ,{0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
    ,{0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
    ,{0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
    ,{0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
    ,{0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
    ,{0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
    ,{0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
    ,{0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
    ,{0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
    ,{0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
    ,{0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
    ,{0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
    ,{0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
    ,{0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
    ,{0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
    ,{0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
    ,{0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
    ,{0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
    ,{0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
    ,{0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
    ,{0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
    ,{0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
    ,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
    ,{0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
    ,{0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
    ,{0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
    ,{0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
    ,{0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
    ,{0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
    ,{0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
    ,{0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
    ,{0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
    ,{0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
    ,{0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
    ,{0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
    ,{0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
    ,{0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
    ,{0x02, 0x04, 0x08, 0x10, 0x20} // 5c ?
    ,{0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
    ,{0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
    ,{0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
    ,{0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
    ,{0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
    ,{0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
    ,{0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
    ,{0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
    ,{0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
    ,{0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
    ,{0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
    ,{0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
    ,{0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
    ,{0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
    ,{0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
    ,{0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
    ,{0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
    ,{0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
    ,{0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
    ,{0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
    ,{0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
    ,{0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
    ,{0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
    ,{0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
    ,{0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
    ,{0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
    ,{0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
    ,{0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
    ,{0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
    ,{0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
    ,{0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
    ,{0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
    ,{0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
    ,{0x10, 0x08, 0x08, 0x10, 0x08} // 7e ?
    ,{0x78, 0x46, 0x41, 0x46, 0x78} // 7f ?
};
unsigned char const bmp1[504] = {//My name and Smily
   0,   0, 224, 252,  31,  31, 252, 224,   0,   0,   0,   0, 
  0, 224, 224, 192,  96,  96,  96,  96, 224, 192,   0,   0, 
  0, 224, 224,  96,  96,  96,  96, 224, 192, 128,   0,   0, 
  0,  64,  96,  96,  96,  96,  96,  96, 224, 192,   0,   0, 
255, 255, 192,  96,  96,  96,  96, 224, 192, 128,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0, 128, 128, 128, 128, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
 56,  63,   7,   6,   6,   6,   6,   7,  63,  56,   0,   0, 
  0,  63,  63,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,  63,  63,   0,   0,   0,   0,   0,  63,  63,   0,   0, 
 28,  62,  51,  51,  51,  51,  51,  51,  63,  63,   0,   0, 
 63,  63,  48,  48,  48,  48,  48,  56,  31,  15,   0,   0, 
224, 248, 252, 222, 142, 175, 143, 223, 255, 127, 127, 255, 
223, 143, 175, 142, 222, 252, 248, 224,   0,   0,   0,   0, 
240, 240,   0,   0,   0, 128, 192, 224, 112,  48,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15, 
127, 255, 255, 223, 159,  31,  63, 127, 255, 240, 240, 255, 
127,  63,  31, 159, 223, 255, 255, 127,  31,   0,   0,   0, 
255, 255,  12,  30,  63, 115, 225, 192, 128,   0,   0,   0, 
254, 254, 128,   0,   0,   0,   0, 128, 254, 254,   0,   0, 
254, 252,  14,  14, 252, 252,  14,  14, 252, 248,   0,   0, 
192, 228,  54,  54,  54,  54,  54,  54, 254, 252,   0,   0, 
  0, 254, 254,  12,   6,   6,   6,   6,  14,  12,   0,   0, 
  0,   1,   3,   7,   7,  15,  14,  28,  28,  28,  28,  28, 
 28,  14,  15,   7,   7,   3,   1,   0,   0,   0,   0,   0, 
131, 131, 128, 128,   0,   0,   0,   1,   3,   3,   0,   0, 
  0,   1,   3,   3,   3,   3,   3,   1,   3,   3,   0,   0, 
  3,   3,   0,   0,   3,   3,   0,   0,   3,   3,   0,   0, 
  1,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0, 
  0,   3,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
255, 255, 128, 193, 127,  62,   0,  96, 244, 148, 148, 124, 
248, 128,   0,  72, 220, 148, 164, 236,  72,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0

};
unsigned char const bmp2[504] = { // LPC2148
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 252, 
252, 252, 252, 252, 252, 248, 240, 224, 192, 128,   0,   0, 
  0,   0,   0,   0,   0, 240, 192, 140,  28, 124, 252, 252, 
252, 252, 248, 224, 128,   0,   0,   0, 192, 240, 248, 252, 
252, 252, 252,  60,  28, 132, 224, 248, 124, 124, 124, 124, 
124, 124, 124, 124, 124, 124, 124, 252, 252, 248, 248, 240, 
192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 
255, 255, 255, 255, 255,   3,   7,  15,  63, 127, 255, 254, 
248, 240, 224, 192, 128, 255, 255, 255, 254,  56,  16, 131, 
207, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 
199, 129,  16, 124, 255, 255, 255, 255, 192, 192, 192, 192, 
192, 192, 192, 192, 192, 192, 192, 240, 255, 255, 255, 255, 
127,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 127, 
127, 127, 127, 127, 127,   0,   0,   0,   0,   0,   0,   1, 
  3,  15,  31,  63, 127,  31,   7,  67, 112, 124, 127, 127, 
127, 127,  63,  15,   3,   1,   0,   3,   7,  31,  63, 127, 
127, 127, 126, 120, 113,  67,  15,  63,   3,   3,   3,   3, 
  3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   1,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,  64, 192, 192,  64,   0,   0,   0,   0,  64, 
192, 192,  64,  64, 192, 128,   0,   0, 128, 192,  64,  64, 
192, 128,   0, 128, 192,  64,  64, 192, 128,   0,   0,   0, 
  0, 128, 192,   0,   0,   0,   0,   0,   0,   0, 128, 192, 
192,   0,   0, 128, 192,  64,  64, 192, 128,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,  64, 127, 127,  64,  64, 112, 120,   0,  64, 
127, 127,  68,   4,   7,   3,   0,  31,  63,  96,  64,  64, 
113,  49,   0,  97, 113,  88,  76, 103,  99,   0,   0,  65, 
 65, 127, 127,  64,  64,   0,   0,  12,  14,  11,  73, 127, 
127,  72,   0,  59, 127,  70,  76, 127,  59,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};
unsigned char const bmp3[504] = { // ARM7
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0, 192, 192, 192, 192, 192, 192, 
192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 
192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 
  0,   0,   0,   0,   0,   0,   0,   0,  64, 192, 128,  64, 
192, 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
192, 128,  64,  64, 128,  64, 128,  64, 192, 128,  64, 192, 
  0, 128,   0,   0,   0,   0,   0,   0, 192,   0, 192, 128, 
192,   0,   0,   0,   0,   0,  15,  15,  15,  15,  15,  15, 
143, 143,  79, 207,  15, 207, 143,  15,  15,  15,  15,  15, 
 15,  15,  15,  15,  15,  15, 255, 255, 255, 255, 255, 255, 
  0,   0,   0,   0, 224, 128, 126, 201, 151,  62,   8,  43, 
 86, 122, 197, 152,  96, 128,   0,   0,   0,   0,   0,   0, 
118, 212, 155, 111, 176,   3, 129, 131, 130, 128,  99,  86, 
253, 130, 125,  80,   0,   0,   0,   0, 234,  21, 247, 174, 
104,  27, 234, 148, 120, 160, 160, 224, 128, 112, 170, 214, 
 57, 102, 219, 180, 111,  73, 182,   0,   0,   0,   0,   0, 
  0,   0,   0, 252, 252, 252, 255, 255, 255,   3,   3,   3, 
  0, 176, 232, 151, 109, 178, 111, 104,  16, 104,  88,  40, 
 16, 127, 104,  23, 248,  39, 218, 176,  64,   0,   0,   0, 
141, 117,  90, 181, 109,   3,   2,   6,   2,  14,  73, 183, 
110, 200, 144,  96, 128,   0,   0,   0, 215,  84, 255, 132, 
121,   0,   0,   0,   1,   6,   1,  14,   2,   1,   1,   0, 
  0, 205, 181, 110, 137, 119, 170,   0,   0, 192, 192, 192, 
255, 255, 255,  63,  63,  63,   0,   0,   0,   0,   0,   0, 
  7,   6,   0,   7,   4,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   1,   7,   0,   7,   4,   3,   0,   0, 
  0,   7,   5,   1,   7,   0,   0,   0,   0,   0,   0,   0, 
  7,   4,   3,   4,   3,   6,   0,   0,   7,   0,   7,   0, 
  7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   6,   5,   3,   6,   5, 241, 240, 240, 255, 255, 255, 
 15,  15,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0, 252, 252, 252, 255, 255, 255,   3,   3,   3, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};
unsigned char const happy_bmp[504] = {
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0, 128, 128, 128, 128, 128, 128,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0, 128, 192, 224, 240, 120,  60,  28,  30,  14,  15, 
  7,   7,   7,   7,   3,   3,   3,   3,   7,   7,   7,   7, 
 15,  14,  30,  28,  60, 120, 240, 224, 192, 128,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 240, 
252, 255,  31,   7,   1,   0,   0,   0,   0, 192, 224, 224, 
224, 224, 192,   0,   0,   0,   0,   0,   0, 192, 224, 224, 
224, 224, 192,   0,   0,   0,   0,   1,   7,  31, 255, 252, 
240,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 
255, 225,   0,   0,   0,   0,   0,   0,   0,   3,   7,   7, 
  7,   7,   1,   0,   0,   0,   0,   0,   0,   1,   7,   7, 
  7,   7,   3,   0,   0,   0,   0,   0,   0,   0, 225, 255, 
255,  63,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3, 
 15,  63, 126, 248, 224, 192, 128,   0,   2,   2,   4,  12, 
 12,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  12, 
 12,   4,   2,   2,   0, 128, 192, 224, 248, 126,  63,  15, 
  3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   1,   3,   7,  15,  14,  30,  28,  60, 
 56,  56,  56, 120, 112, 112, 112, 112, 120,  56,  56,  56, 
 60,  28,  30,  14,  15,   7,   3,   1,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

unsigned char const inbox_bmp[504] = {
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0, 128, 128, 128, 128, 128, 128,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 128, 128, 
128, 128, 128, 255, 255, 255, 255, 255, 255, 128, 128, 128, 
128, 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 248, 248, 
248, 248, 248, 248, 248, 216, 152,  24,  24,  24,   0,   1, 
  7,  15,  31,  63, 127, 255, 255, 127,  63,  31,  15,   7, 
  1,   0,  24,  24,  24, 152, 216, 248, 248, 248, 248, 248, 
248, 248,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 
255, 255, 255,   1,   3,   7,  15,  31,  62, 126, 252, 248, 
240, 224, 192, 128, 128,   0,   0, 128, 192, 192, 224, 240, 
248, 124, 126,  62,  31,  15,   7,   3,   1, 255, 255, 255, 
255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 
255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  1,   3,   7,  15,  31,  31,  31,  31,  15,   7,   3,   1, 
  0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255, 
255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 127, 127, 
127, 127, 127,  96,  96,  96,  96,  96,  96,  96,  96,  96, 
 96,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96, 
 96,  96,  96,  96,  96,  96,  96,  96,  96, 127, 127, 127, 
127, 127,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};
unsigned char const outbox_bmp[504] = {
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0, 128, 128,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 128, 192, 
240, 248, 252, 254, 255, 255, 255, 255, 254, 252, 248, 240, 
192, 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 248, 248, 
248, 248, 248, 248, 248, 216, 152,  24,  24,   0,   0,   0, 
  0,   0,   0, 255, 255, 255, 255, 255, 255,   0,   0,   0, 
  0,   0,   0,  24,  24, 152, 216, 248, 248, 248, 248, 248, 
248, 248,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 
255, 255, 255,   1,   3,   7,  15,  31,  62, 126, 252, 248, 
240, 224, 192, 128, 128,   0,   0, 128, 192, 192, 224, 240, 
248, 124, 126,  62,  31,  15,   7,   3,   1, 255, 255, 255, 
255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 
255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  1,   3,   7,  15,  31,  31,  31,  31,  15,   7,   3,   1, 
  0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255, 
255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 127, 127, 
127, 127, 127,  96,  96,  96,  96,  96,  96,  96,  96,  96, 
 96,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96, 
 96,  96,  96,  96,  96,  96,  96,  96,  96, 127, 127, 127, 
127, 127,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

unsigned char const phone_bmp[504] = {
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0, 128, 128, 192, 192, 128,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0, 192, 240, 252, 
254, 255, 255, 255, 255, 255, 255, 255, 254, 248, 224,   0, 
  0,   0,   0,   0,   0,   0,  64,  64,  72, 200, 136, 136, 
 16,  16,  48,  32, 192, 128,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0, 127, 255, 255, 
255, 255, 255, 255, 255, 255,  63,  15,  15,   7,   3,   0, 
  0,   0,   1,   1,   1,   3,   2,   6,  12,  24, 112, 129, 
  3,   6,  28, 240,   0,   1,   7, 252,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   7, 
 31, 127, 255, 255, 255, 255, 255, 252, 240, 224, 192, 128, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  31, 
  0,   0,   0,   3,   0,   0,   0,   1,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   1,   7,  15,  31,  63, 127, 255, 255, 255, 
255, 254, 252, 248, 248, 240, 240, 248, 252, 254, 255, 255, 
255, 255, 255, 255, 254, 252, 248, 240, 224,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1, 
  3,   7,   7,  15,  15,  31,  31,  31,  63,  63,  63,  63, 
 63,  31,  31,  31,  15,   7,   7,   3,   1,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};
unsigned char const clock_bmp[504] = {
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0, 128, 128, 128, 128, 128, 128,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0, 128, 192, 224, 240, 248, 252, 124,  62,  30,  31, 
 31,  15,  15,  15,  15,  63,  63,  15,  15,  15,  15,  31, 
 31,  62,  62, 124, 252, 248, 240, 224, 192, 128,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 240, 
252, 255, 255,  63,   7,   3,   1,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0, 255, 255,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   1,   3,   7,  63, 255, 255, 252, 
240,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 
255, 255, 255,  12,  12,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,  30,  31,  63,  63, 127, 252, 240, 224, 192, 
128,   0,   0,   0,   0,   0,   0,  12,  12, 255, 255, 255, 
255,  63,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3, 
 15,  63, 127, 255, 252, 240, 224, 192, 128,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   3,   7, 
  7,  15,  14, 128, 192, 224, 240, 252, 255, 127,  63,  15, 
  3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   1,   3,   7,  15,  15,  31,  30,  62, 
 62,  60,  60, 124, 124, 127, 127, 124, 124,  60,  60,  62, 
 62,  31,  31,  15,  15,   7,   3,   1,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

unsigned char const setting_bmp[504] = {
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0, 224, 224, 224, 224, 246, 
255, 255, 124, 120, 120, 124, 254, 254, 254, 248, 192, 224, 
224,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0, 192, 192, 192, 
192,   0,   0,   0,   0,   0,  16, 112, 121,  63, 127, 255, 
255, 240, 224, 224, 224, 224, 240, 255, 255, 127, 127, 121, 
112,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,  12, 158, 254, 252, 252, 248, 252, 124, 127,  63,  63, 
127, 124, 252, 248, 252, 252, 254, 190,  12,   0,   0,   6, 
  7,   7,   3,   1,   1,   3,  15,   7,   7,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  30,  30, 
 30,  30, 127, 255, 255, 255, 251, 192, 128, 128,   0,   0, 
128, 128, 192, 243, 255, 255, 255, 127,  30,  30,  30,  30, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,  12,  31,  31,  15,   7,   7,  15,  15, 255, 255, 255, 
255,  15,  15,   7,   7,  15,  31,  31,  12,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};
// -----------------------------------------------------------------------------

void pcd8544_write(unsigned char type, unsigned char value)
{
     
     if(type != 0)
     {
         gpio_set_pin_high(DC_pin);
     }
     else
     {
        gpio_set_pin_low(DC_pin);
     }

     spi0_tx_char(value);
}
void pcd8544_reset(void)
{
     gpio_set_pin_low(RST_pin);
     gpio_set_pin_high(RST_pin);
}
void pcd8544_init(void)
{
    pcd8544_reset();
    pcd8544_write(CMD, (pcd8544_extended_instruction | pcd8544_function_set));
    pcd8544_write(CMD, (pcd8544_set_bias | 0x02));
    pcd8544_set_contrast(0x34);
    pcd8544_write(CMD, pcd8544_set_temp);
    pcd8544_write(CMD, (pcd8544_display_normal | pcd8544_display_control));
    pcd8544_write(CMD, pcd8544_function_set);
    pcd8544_write(CMD, pcd8544_display_all_on);
    pcd8544_write(CMD, pcd8544_display_normal);
    pcd8544_clear_buffer(OFF);
}


void pcd8544_backlight_state(unsigned char value)
{
     if(value != 0)
     {
         gpio_set_pin_low(BL_pin);
     }
     else
     {
         gpio_set_pin_high(BL_pin);
     }
}


void pcd8544_set_contrast(unsigned char value) 
{
    if(value >= 0x7F)
    {
       value = 0x7F;
    }

    pcd8544_write(CMD, (pcd8544_extended_instruction | pcd8544_function_set));
    pcd8544_write(CMD, (pcd8544_set_VOP | value));
    pcd8544_write(CMD, pcd8544_function_set);
}


void pcd8544_set_cursor(unsigned char x_pos, unsigned char y_pos)
{
    pcd8544_write(CMD, (pcd8544_set_X_addr | x_pos));
    pcd8544_write(CMD, (pcd8544_set_Y_addr | y_pos));
}


void pcd8544_print_char(unsigned char ch, unsigned char colour)
{
     unsigned char s = 0;
     unsigned char chr = 0;
     
     for(s = 0; s <= 4; s++)
     {
           chr = font[(ch - 0x20)][s];
           if(colour == WHITE)
           {
               chr = ~chr;
           }
           pcd8544_write(DAT, chr);
     }
}


void pcd8544_print_custom_char(unsigned char *map)
{
    unsigned char s = 0;

    for(s = 0; s <= 4; s++)
    {
        pcd8544_write(DAT, *map++);
    }
}


void pcd8544_fill(unsigned char bufr)
{
    unsigned int s = 0;

    pcd8544_set_cursor(0, 0);

    for(s = 0; s < buffer_size; s++)
    {
        pcd8544_write(DAT, bufr);
    }
}


void pcd8544_clear_buffer(unsigned char colour)
{
    unsigned char x_pos = 0;
    unsigned char y_pos = 0;
    
    for(x_pos; x_pos < X_max; x_pos++)
    {
        for(y_pos; y_pos < Rows; y_pos++)
        {
            pcd8544_buffer[x_pos][y_pos] = colour;
        }
    }
}


void pcd8544_clear_screen(unsigned char colour)
{
    unsigned char x_pos = 0;
    unsigned char y_pos = 0;
    colour = ~colour;
    for(y_pos = 0; y_pos < Rows; y_pos++)
    {
        for(x_pos = 0; x_pos < X_max; x_pos++)
        {
            pcd8544_print_string(x_pos, y_pos, " ", colour);
        }
    }
}


void pcd8544_print_image(const unsigned char *bmp)
{
    unsigned int s = 0;
    
    pcd8544_set_cursor(0, 0);
    
    for(s = 0; s < buffer_size; s++)
    {
        pcd8544_write(DAT, bmp[s]);
    }
}


void pcd8544_print_string(unsigned char x_pos, unsigned char y_pos, unsigned char *ch, unsigned char colour)
{
    
	int i =6;
	pcd8544_set_cursor(x_pos, y_pos);
    do
    {
       pcd8544_print_char(*ch++, colour);
	   pcd8544_set_cursor(x_pos+i, y_pos);
	   i+=6;
    }while((*ch >= 0x20) && (*ch <= 0x7F));
}

void print_int(unsigned char x_pos, unsigned char y_pos, signed long value, unsigned char colour)
{
    unsigned char ch = 0x00;
	colour = ~colour;
    if(value > 9999)
    {
        ch = (value / 10000);
        pcd8544_set_cursor(x_pos , y_pos);
        pcd8544_print_char((48 + ch), colour);

        ch = ((value % 10000)/ 1000);
        pcd8544_set_cursor((x_pos + 6), y_pos);
        pcd8544_print_char((48 + ch), colour);

        ch = ((value % 1000) / 100);
        pcd8544_set_cursor((x_pos + 12), y_pos);
        pcd8544_print_char((48 + ch), colour);

        ch = ((value % 100) / 10);
        pcd8544_set_cursor((x_pos + 18), y_pos);
        pcd8544_print_char((48 + ch), colour);

        ch = (value % 10);
        pcd8544_set_cursor((x_pos + 24), y_pos);
        pcd8544_print_char((48 + ch), colour);
    }

    else if((value > 999) && (value <= 9999))
    {
        ch = ((value % 10000)/ 1000);
        pcd8544_set_cursor(x_pos, y_pos);
        pcd8544_print_char((48 + ch), colour);

        ch = ((value % 1000) / 100);
        pcd8544_set_cursor((x_pos + 6), y_pos);
        pcd8544_print_char((48 + ch), colour);

        ch = ((value % 100) / 10);
        pcd8544_set_cursor((x_pos + 12), y_pos);
        pcd8544_print_char((48 + ch), colour);

        ch = (value % 10);
        pcd8544_set_cursor((x_pos + 18), y_pos);
        pcd8544_print_char((48 + ch), colour);

        /*pcd8544_set_cursor((x_pos + 24), y_pos);
        pcd8544_print_char(0x20, colour);*/
    }
    else if((value > 99) && (value <= 999))
    {
        ch = ((value % 1000) / 100);
        pcd8544_set_cursor((x_pos ), y_pos);
        pcd8544_print_char((48 + ch), colour);

        ch = ((value % 100) / 10);
        pcd8544_set_cursor((x_pos + 6), y_pos);
        pcd8544_print_char((48 + ch), colour);

        ch = (value % 10);
        pcd8544_set_cursor((x_pos + 12), y_pos);
        pcd8544_print_char((48 + ch), colour);
        
        /*pcd8544_set_cursor((x_pos + 18), y_pos);
        pcd8544_print_char(0x20, colour);

        pcd8544_set_cursor((x_pos + 24), y_pos);
        pcd8544_print_char(0x20, colour);*/
    }
    else if((value > 9) && (value <= 99))
    {
        ch = ((value % 100) / 10);
        pcd8544_set_cursor(x_pos, y_pos);
        pcd8544_print_char((48 + ch), colour);

        ch = (value % 10);
        pcd8544_set_cursor((x_pos + 6), y_pos);
        pcd8544_print_char((48 + ch), colour);

       /* pcd8544_set_cursor((x_pos + 12), y_pos);
        pcd8544_print_char(0x20, colour);
        
        pcd8544_set_cursor((x_pos + 18), y_pos);
        pcd8544_print_char(0x20, colour);
        
        pcd8544_set_cursor((x_pos + 24), y_pos);
        pcd8544_print_char(0x20, colour);*/
    }
    else
    {
        
        pcd8544_set_cursor((x_pos + 6), y_pos);
        pcd8544_print_char((48 + value), colour);
        
        pcd8544_set_cursor(x_pos, y_pos);
        pcd8544_print_char(0x20, colour);
        
        /*pcd8544_set_cursor((x_pos + 18), y_pos);
        pcd8544_print_char(0x20, colour);
        
        pcd8544_set_cursor((x_pos + 24), y_pos);
        pcd8544_print_char(0x20, colour);
        
        pcd8544_set_cursor((x_pos + 24), y_pos);
        pcd8544_print_char(0x20, colour);*/
    }
}


void print_decimal(unsigned char x_pos, unsigned char y_pos, unsigned int value, unsigned char points, unsigned char colour)
{
    unsigned char ch = 0x00;
	colour = ~colour;
    pcd8544_set_cursor(x_pos, y_pos);
    pcd8544_print_char(0x2E, colour);

    ch = (value / 1000);
    pcd8544_set_cursor((x_pos + 6), y_pos);
    pcd8544_print_char((48 + ch), colour);

    if(points > 1)
    {
        ch = ((value % 1000) / 100);
        pcd8544_set_cursor((x_pos + 12), y_pos);
        pcd8544_print_char((48 + ch), colour);


        if(points > 2)
        {
            ch = ((value % 100) / 10);
            pcd8544_set_cursor((x_pos + 18), y_pos);
            pcd8544_print_char((48 + ch), colour);

            if(points > 3)
            {
                ch = (value % 10);
                pcd8544_set_cursor((x_pos + 24), y_pos);
                pcd8544_print_char((48 + ch), colour);;
            }
        }
    }
}


void print_float(unsigned char x_pos, unsigned char y_pos, float value, unsigned char points, unsigned char colour)
{
    signed long tmp = 0x00;
    tmp = ((signed long)value);
    print_int(x_pos, y_pos, tmp, colour);
    tmp = ((value - tmp) * 10000);

    if(tmp < 0)
    {
       tmp = -tmp;
    }

    if((value >= 9999) && (value < 99999))
    {
        print_decimal((x_pos + 36), y_pos, tmp, points, colour);
    }
    else if((value >= 999) && (value < 9999))
    {
        print_decimal((x_pos + 30), y_pos, tmp, points, colour);
    }
    else if((value >= 99) && (value < 999))
    {
        print_decimal((x_pos + 24), y_pos, tmp, points, colour);
    }
    else if((value >= 9) && (value < 99))
    {
        print_decimal((x_pos + 18), y_pos, tmp, points, colour);
    }
    else if(value < 9)
    {
        print_decimal((x_pos + 12), y_pos, tmp, points, colour);
        if((value) < 0)
        {
            pcd8544_set_cursor(x_pos, y_pos);
            pcd8544_print_char(0x2D, colour);
        }
        else
        {
            pcd8544_set_cursor(x_pos, y_pos);
            pcd8544_print_char(0x20, colour);
        }
    }
}


void Draw_Pixel(unsigned char x_pos, unsigned char y_pos, unsigned char colour)
{
    unsigned char row = 0;
    unsigned char value = 0;

    if((x_pos < 0) || (x_pos >= X_max) || (y_pos < 0) || (y_pos >= Y_max))
    {
        return;
    }

    row = (y_pos >> 3);

    value = pcd8544_buffer[x_pos][row];
    
    if(colour == BLACK)
    {
        value |= (1 << (y_pos % 8));
    } 
    else if(colour == WHITE)
    {
        value &= (~(1 << (y_pos % 8)));
    }
    else if(colour == PIXEL_XOR)
    {
        value ^= (1 << (y_pos % 8));
    } 

    pcd8544_buffer[x_pos][row] = value;

    pcd8544_set_cursor(x_pos, row);
    pcd8544_write(DAT, value);
}


void Draw_Line(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char colour)
{
    signed int dx = 0x0000;
    signed int dy = 0x0000;
    signed int stepx = 0x0000;
    signed int stepy = 0x0000;
    signed int fraction = 0x0000;

    dy = (y2 - y1);
    dx = (x2 - x1);

    if (dy < 0)
    {
        dy = -dy;
        stepy = -1;
    }
    else
    {
        stepy = 1;
    }

    if (dx < 0)
    {
        dx = -dx;
        stepx = -1;
    }
    else
    {
        stepx = 1;
    }

    dx <<= 0x01;
    dy <<= 0x01;

    Draw_Pixel(x1, y1, colour);

    if (dx > dy)
    {
        fraction = (dy - (dx >> 1));
        while (x1 != x2)
        {
            if (fraction >= 0)
            {
                y1 += stepy;
                fraction -= dx;
            }
            x1 += stepx;
            fraction += dy;

            Draw_Pixel(x1, y1, colour);
        }
    }
    else
    {
        fraction = (dx - (dy >> 1));

        while (y1 != y2)
        {
            if (fraction >= 0)
            {
                x1 += stepx;
                fraction -= dy;
            }
            y1 += stepy;
            fraction += dx;
            Draw_Pixel(x1, y1, colour);
        }
    }
}


void Draw_Rectangle(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char fill, unsigned char colour)
{
     unsigned char i = 0x00;
     unsigned char xmin = 0x00;
     unsigned char xmax = 0x00;
     unsigned char ymin = 0x00;
     unsigned char ymax = 0x00;

     if(fill != NO)
     {
        if(x1 < x2)
        {
           xmin = x1;
           xmax = x2;
        }
        else
        {
           xmin = x2;
           xmax = x1;
        }

        if(y1 < y2)
        {
           ymin = y1;
           ymax = y2;
        }
        else
        {
           ymin = y2;
           ymax = y1;
        }

        for(; xmin <= xmax; ++xmin)
        {
             for(i = ymin; i <= ymax; ++i)
             {
                 Draw_Pixel(xmin, i, colour);
             }
         }
     }

     else
     {
        Draw_Line(x1, y1, x2, y1, colour);
        Draw_Line(x1, y2, x2, y2, colour);
        Draw_Line(x1, y1, x1, y2, colour);
        Draw_Line(x2, y1, x2, y2, colour);
     }
}


void Draw_Circle(signed int xc, signed int yc, signed int radius, unsigned char fill, unsigned char colour)
{
    signed int a = 0x0000;
    signed int b = 0x0000;
    signed int p = 0x0000;

    b = radius;
    p = (1 - b);

    do
    {
        if(fill != NO)
        {
            Draw_Line((xc - a), (yc + b), (xc + a), (yc + b), colour);
            Draw_Line((xc - a), (yc - b), (xc + a), (yc - b), colour);
            Draw_Line((xc - b), (yc + a), (xc + b), (yc + a), colour);
            Draw_Line((xc - b), (yc - a), (xc + b), (yc - a), colour);
        }
        else
        {
            Draw_Pixel((xc + a), (yc + b), colour);
            Draw_Pixel((xc + b), (yc + a), colour);
            Draw_Pixel((xc - a), (yc + b), colour);
            Draw_Pixel((xc - b), (yc + a), colour);
            Draw_Pixel((xc + b), (yc - a), colour);
            Draw_Pixel((xc + a), (yc - b), colour);
            Draw_Pixel((xc - a), (yc - b), colour);
            Draw_Pixel((xc - b), (yc - a), colour);
        }

        if(p < 0)
        {
            p += (0x03 + (0x02 * a++));
        }
        else
        {
            p += (0x05 + (0x02 * ((a++) - (b--))));
        }
    }while(a <= b);
}
#endif
